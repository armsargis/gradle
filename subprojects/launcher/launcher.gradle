configurations {
    startScriptGenerator
}

dependencies {
    groovy libraries.groovy_depends

    compile project(':core')
    compile project(':ui')
    compile project(':toolingApi')

    compile libraries.jna

    compile libraries.slf4j_api

    startScriptGenerator project(':plugins')
}

useTestFixtures()

jar.manifest.mainAttributes('Main-Class': "org.gradle.launcher.GradleMain")
jar.doFirst {
    jar.manifest.mainAttributes('Class-Path': "${project(':core').jar.archivePath.name}")
}

task startScripts {
    inputs.files configurations.startScriptGenerator
    inputs.properties['classpath'] = jar.archiveName
    outputs.dir startScriptsDir

    doLast {
        logging.captureStandardOutput(LogLevel.INFO)
        def factory = services.get(ClassLoaderFactory)
        def classLoader = factory.createIsolatedClassLoader(configurations.startScriptGenerator.collect { it.toURI().toURL() })
        def generator = classLoader.loadClass('org.gradle.api.internal.plugins.StartScriptGenerator').newInstance()
        generator.applicationName = 'Gradle'
        generator.optsEnvironmentVar = 'GRADLE_OPTS'
        generator.exitEnvironmentVar = 'GRADLE_EXIT_CONSOLE'
        generator.mainClassName = 'org.gradle.launcher.GradleMain'
        generator.scriptRelPath = 'bin/gradle'
        generator.classpath = ["lib/${jar.archiveName}" as String]
        generator.appNameSystemProperty = 'org.gradle.appname'
        generator.generateUnixScript(file("$startScriptsDir/gradle"))
        generator.generateWindowsScript(file("$startScriptsDir/gradle.bat"))
    }
}