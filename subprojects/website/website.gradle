/*
 * Copyright 2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.util.regex.Pattern

buildscript {
    dependencies.classpath 'net.java.dev.jets3t:jets3t:0.8.1'
    repositories.mavenCentral()
}

apply plugin: "base"
evaluationDependsOn ":docs"

// fail early if we don't have credentials to connect to the host
gradle.taskGraph.whenReady { graph ->
    tasks.withType(S3PutTask).matching { graph.hasTask(it) }.all {
        accessKey project.gradleS3AccessKey
        secretKey project.gradleS3SecretKey
    }
}

task uploadDistributions(type: S3DistributionFileUpload) {
    bucketName "downloads.gradle.org"
    source rootProject.testedDists
    directory "distributions${-> project.version.release ? "" : "-snapshots"}"
}

task generateReleasesXml() {
    ext.outputFile = file("$buildDir/releases.xml")
    outputs.file outputFile
    outputs.upToDateWhen { false }

    doLast {
        project.releases.modifyTo(outputFile) {
            def releases = release

            current[0] + {
                def readVersion = { label ->
                    try {
                        def text = new URL("http://gradle.org/versions/$label").text
                        new groovy.json.JsonSlurper().parseText(text)
                    } catch (FileNotFoundException e) {
                        // service returns 404 if there is no version with that label,
                        // so we get a FileNotFoundException from URL.text
                        null
                    }
                }

                // nightly
                def nightlyVersion
                def nightlyBuildTime
                if (this.project.isNightlyBuild()) {
                    nightlyVersion = this.project.version
                    nightlyBuildTime = this.project.version.timestamp
                } else {
                    def nightlyRemote = readVersion("nightly")
                    if (nightlyRemote) {
                        nightlyVersion = nightlyRemote.version
                        nightlyBuildTime = nightlyRemote.buildTime
                    }
                }

                if (nightlyVersion && nightlyBuildTime) {
                    release(version: nightlyVersion, "build-time": nightlyBuildTime, nightly: true, snapshot: true)
                }

                // rc
                if (!this.project.isFinalReleaseBuild()) { // wipe out the rc if we are in a final release
                    if (this.project.isRcBuild()) {
                        def nextNode = next[0]
                        assert nextNode
                        release(version: this.project.version, "build-time": this.project.version.timestamp, "rc-for": nextNode.@version, snapshot: true)
                    } else {
                        def rcRemote = readVersion("release-candidate")
                        if (rcRemote) {
                            release(version: rcRemote.version, "build-time": rcRemote.buildTime, "rc-for": rcRemote.rcFor, snapshot: true)
                        }
                    }
                }

                // current
                def currentVersion
                def currentBuildTime
                if (this.project.version.release) {
                    
                    /*
                        We are doing a release build.
                        We are relying on the project.releases.incrementNextVersion() NOT being called yet.
                    */
                    currentVersion = this.project.version
                    currentBuildTime = this.project.version.timestamp
                    release(version: currentVersion, "build-time": currentBuildTime, current: true)
                } else {
                    def currentRemote = readVersion("current")
                    currentVersion = currentRemote.version

                    def currentRelease = releases.find { it.@version == currentVersion }
                    assert currentRelease : "didn't find $currentVersion in source releases.xml"
                    currentRelease.@current = true
                }
            }

            [next, current]*.each { remove(it) }
        }
    }
}

task checkoutRepo(type: Exec) {
    ext.checkoutDir = file("$buildDir/repo-master")
    onlyIf { !checkoutDir.exists() }
    executable "git"
    args "clone", "git@github.com:gradleware/web.git", checkoutDir
}

task pushReleasesXml {
    dependsOn checkoutRepo, generateReleasesXml
    outputs.upToDateWhen { false }
    ext.repo = project.file("$project.buildDir/repo-$name")

    doLast {
        def masterCheckout = project.checkoutRepo.checkoutDir
        def gitOnMasterCheckout = { Object[] cliArgs ->
            project.exec {
                workingDir masterCheckout
                executable "git"
                args cliArgs
            }
        }

        gitOnMasterCheckout "reset", "--hard", "HEAD"
        gitOnMasterCheckout "clean", "-f", "-d"
        gitOnMasterCheckout "pull"

        project.delete repo

        // Gradle copy chokes on the symlinks
        ant.copy(todir: repo) {
            fileset(dir: masterCheckout, defaultexcludes: false)
        }

        def releasesXml = new File(repo, "data/releases.xml")
        def checkedInReleasesXmlText = releasesXml.text
        def newReleasesXmlText = generateReleasesXml.outputFile.text
        if (checkedInReleasesXmlText != newReleasesXmlText) {
            releasesXml.text = newReleasesXmlText

            def gitOnTaskRepo = { Object[] cliArgs ->
                project.exec {
                    workingDir repo
                    executable "git"
                    args cliArgs
                }
            }

            def message = "updating releases.xml from "
            if (isFinalReleaseBuild()) {
                message += "final release build"
            } else if (isNightlyBuild()) {
                message += "nightly build"
            } else if (isRcBuild()) {
                message += "release-candidate build"
            } else {
                message += "adhoc build"
            }

            gitOnTaskRepo "add", releasesXml.absolutePath
            gitOnTaskRepo "commit", "-m", "[gradle-build] $message"

            if (!project.hasProperty("noPushReleasesXml")) {
                gitOnTaskRepo "push"
            }
        } else {
            println "Not pushing new releases.xml to site as there were no changes after generation"
        }
    }

}


task docsWithAnalytics(type: PatternTransform) {
    inputs.files project(":docs").docsZip
    from { zipTree(project(":docs").docsZip.outputs.files.singleFile) }
    into "$buildDir/$name"
    transform ".*(?<!(javadoc|groovydoc)/index)\\.html", Pattern.compile("<\\s*/\\s*head\\s*>", Pattern.CASE_INSENSITIVE), """
            <script type="text/javascript">
              var _gaq = _gaq || [];
              _gaq.push(['_setAccount', 'UA-4207603-1']);
              _gaq.push(['_trackPageview']);

              (function() {
                var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
              })();
            </script>
            <script type="text/javascript" language="javascript">llactid=20600</script>
            <script type="text/javascript" language="javascript" src="http://t3.trackalyzer.com/trackalyze.js"></script>
        </head>
    """.trim()
}

task docsWithAnalyticsZip(type: Zip) {
    from docsWithAnalytics
    baseName "online-docs"
}

task uploadDocs(type: S3DistributionFileUpload) {
    bucketName "downloads.gradle.org"
    source docsWithAnalyticsZip
    directory "online-docs${-> project.version.release ? "" : "-snapshots"}"
}

task pullDocs {
    doLast {
        new URL("http://gradle.org/update-docs/").text
    }
}

class PatternTransform extends Sync {

    private transformCounter = 0

    void transform(relativePathPattern, toReplacePattern, replaceWith) {
        relativePathPattern = compilePattern(relativePathPattern)
        toReplacePattern = compilePattern(toReplacePattern)

        inputs.property "transform:${transformCounter++}", [
            relativePathPattern: asMap(relativePathPattern),
            toReplacePattern: asMap(toReplacePattern),
            replaceWith: replaceWith
        ]

        eachFile {
            if (relativePathPattern.matcher(it.relativePath.toString()).matches()) {
                it.filter {
                    toReplacePattern.matcher(it).replaceAll(replaceWith)
                }
            }
        }
    }

    private asMap(Pattern pattern) {
        [pattern: pattern.toString(), flags: pattern.flags]
    }

    protected Pattern compilePattern(pattern) {
        pattern instanceof Pattern ? pattern : Pattern.compile(pattern)
    }
}

import org.jets3t.service.security.AWSCredentials
import org.jets3t.service.security.ProviderCredentials
import org.jets3t.service.model.S3Object
import org.jets3t.service.S3Service
import org.jets3t.service.impl.rest.httpclient.RestS3Service
import org.gradle.api.Action
import org.gradle.listener.ActionBroadcast
// only needed for doLast block
import org.jets3t.service.model.StorageObject

class S3DistributionFileUpload extends S3PutTask {
    @Input directory
    
    S3DistributionFileUpload() {
        bucketName "downloads.gradle.org"
        eachObject {
            if (it.key.endsWith(".zip")) {
                it.contentType = "application/zip"
            } else {
                throw new InvalidUserDataException("Don't know content type for file: $it.key")
            }
            it.key = "$directory/$name"
        }

        // S3 incorrectly treats “+” incorrectly as a “ ”
        // https://forums.aws.amazon.com/thread.jspa?threadID=55746
        // We compensate by also providing files with spaces (for unencoded “+”) and files with “+” (for encoded “+”)
        doLast {
            def service = createService()
            source.each {
                def key = "$directory/$it.name"
                if (key.contains("+")) {
                    def copyDestination = key.replace("+", " ")
                    logger.lifecycle "making copy of '$key' to '$copyDestination'"
                    service.copyObject(bucketName, key, bucketName, new StorageObject(copyDestination), false)
                }
            }
        }
    }
}

class S3PutTask extends SourceTask {
    @Input accessKey
    @Input secretKey
    @Input bucketName
    @Input @Optional friendlyName

    protected ActionBroadcast<S3Object> eachObjects = new ActionBroadcast<S3Object>()

    void eachObject(Action<S3Object> action) {
        eachObjects.add(action)
    }

    @TaskAction
    void put() {
        def service = createService()
        source.each { File file ->
            def s3Object = new S3Object(file)
            s3Object.addMetadata("gradle-release-date", project.version.timestamp)
            eachObjects.execute(s3Object)
            logger.lifecycle "uploading '$file.name' to '$s3Object.key'"
            service.putObject(bucketName, s3Object)
        }
    }

    ProviderCredentials createCredentials() {
        new AWSCredentials(accessKey, secretKey, friendlyName)
    }

    S3Service createService() {
        new RestS3Service(createCredentials())
    }
}