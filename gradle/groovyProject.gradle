import java.util.jar.Attributes

apply plugin: 'groovy'

archivesBaseName = "gradle-${name.replaceAll("\\p{Upper}") { "-${it.toLowerCase()}" } }"

sourceCompatibility = 1.5
targetCompatibility = 1.5

ext {
    hasGroovySource = sourceSets.main.groovy.srcDirs.any { it.exists() }
    compileTasks = tasks.matching { it instanceof Compile || it instanceof GroovyCompile }
    testTasks = tasks.withType(Test)
    generatedResourcesDir = file("$buildDir/generated-resources/main")
    generatedTestResourcesDir = file("$buildDir/generated-resources/test")
    jarTasks = tasks.withType(Jar)
}

dependencies {
    testCompile libraries.junit, libraries.jmock, libraries.spock
}

if (!hasGroovySource) {
    // Remove Groovy configuration from compile classpath
    configurations.compile.extendsFrom = []
}

// Extracted as it's also used by buildSrc
apply from: "$rootDir/gradle/compile.gradle"

task classpathManifest(type: ClasspathManifest)

sourceSets {
    main.output.dir generatedResourcesDir, builtBy: classpathManifest
}

testTasks.all { task ->
    maxParallelForks = rootProject.maxParallelForks
    if (isCiServer) {
        doFirst {
            println "maxParallelForks for '$task.path' is $task.maxParallelForks"
        }
    }
}

jarTasks.all { jar ->
    jar.manifest.mainAttributes(
            (Attributes.Name.IMPLEMENTATION_TITLE.toString()): 'Gradle',
            (Attributes.Name.IMPLEMENTATION_VERSION.toString()): version,
    )
}

// Configures the project to use the test fixtures from another project, which by default is core.
// Note this is not used to provide test fixtures, see gradle/testFixtures.gradle for that
ext.useTestFixtures = { params = [:] ->
    def projectPath = params.project ?: ":core"
    def sourceSet = params.sourceSet ?: "test"
    def compileConfiguration = sourceSet == "main" ? "compile" : "${sourceSet}Compile"
    def runtimeConfiguration = sourceSet == "main" ? "runtime" : "${sourceSet}Runtime"

    dependencies {
        add(compileConfiguration, project(path: projectPath, configuration: "testFixturesUsageCompile"))
        add(compileConfiguration, project(':internalTesting'))
        add(runtimeConfiguration, project(path: projectPath, configuration: "testFixturesUsageRuntime"))
    }
}

if (file("src/testFixtures").exists()) {
    apply from: "$rootDir/gradle/testFixtures.gradle"
}

if (file("src/integTest").exists()) {
    apply from: "$rootDir/gradle/integTest.gradle"
}

class ClasspathManifest extends DefaultTask {

    FileCollection input = project.configurations.runtime

    @OutputFile
    File getManifestFile() {
        return new File(project.generatedResourcesDir, "${project.archivesBaseName}-classpath.properties")
    }

    @Input
    Properties getProperties() {
        def properties = new Properties()
        properties.runtime = input.fileCollection {
            (it instanceof ExternalDependency) || (it instanceof FileCollectionDependency)
        }.collect {it.name}.join(',')
        properties.projects = input.allDependencies.withType(ProjectDependency).collect {it.dependencyProject.archivesBaseName}.join(',')
        return properties
    }

    @TaskAction
    def generate() {
        manifestFile.withOutputStream { properties.save(it, 'module definition') }
    }
}
ext.ClasspathManifest = ClasspathManifest