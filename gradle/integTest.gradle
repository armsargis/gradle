/*
 * Adds an 'integTest' source set, which contains the integration tests for the project.
 */
apply plugin: 'java'
rootProject.apply plugin: IntegTestPlugin

configurations {
    integTestCompile {
        extendsFrom testCompile
    }
    integTestRuntime {
        extendsFrom integTestCompile, testRuntime
    }
}

dependencies {
    integTestCompile project(":internalIntegTesting")
}

sourceSets {
    integTest {
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integTestCompile
        runtimeClasspath = output + compileClasspath + configurations.integTestRuntime
    }
}

plugins.withType(org.gradle.plugins.ide.idea.IdeaPlugin) { // lazy as plugin not applied yet
    idea {
        module {
            testSourceDirs += sourceSets.integTest.groovy.srcDirs
            testSourceDirs += sourceSets.integTest.resources.srcDirs
            scopes.TEST.plus.add(configurations.integTestCompile)
            scopes.TEST.plus.add(configurations.integTestRuntime)
        }
    }
}

plugins.withType(org.gradle.plugins.ide.eclipse.EclipsePlugin) { // lazy as plugin not applied yet
    eclipse {
        classpath {
            plusConfigurations.add(configurations.integTestCompile)
            plusConfigurations.add(configurations.integTestRuntime)
        }
    }
}

ext.integTestTasks = tasks.withType(Test).matching { it.name.toLowerCase().endsWith('integtest') }

integTestTasks.all {
    dependsOn ':intTestImage', project(":docs").tasks.matching { it.name == "samples" } // lazy as doc not eval'd yet
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    testSrcDirs = []
    jvmArgs '-Xmx512m', '-XX:MaxPermSize=256m', '-XX:+HeapDumpOnOutOfMemoryError'
    maxParallelForks = guessMaxForks(project)

    testResultsDir = file("${project.testResultsDir}/$name")

    systemProperties['org.gradle.integtest.versions'] = project.hasProperty("testAllVersions") ? 'all' : 'latest'
    if (project.hasProperty('crossVersionTestsOnly')) {
        include '**/*CrossVersion*'
    }

    doFirst {
        testReportDir = file("${project.reporting.baseDir}/$name")
        systemProperties['integTest.gradleHomeDir'] = integTestImageDir.absolutePath
        systemProperties['integTest.gradleUserHomeDir'] = integTestUserDir.absolutePath
        systemProperties['integTest.samplesdir'] = project(":docs").samplesDir.absolutePath
        if (isCIBuild()) {
            maxParallelForks = 4
        }
    }
}

['embedded', 'forking', 'daemon', 'embeddedDaemon'].each {
    def mode = it
    def taskName = "${it}IntegTest"
    tasks.addRule(taskName) { name ->
        if (name != taskName) { return }
        tasks.add(taskName, Test).configure {
            systemProperties['org.gradle.integtest.executer'] = mode
        }
    }
}

daemonIntegTest {
    systemProperties['org.gradle.integtest.daemon.registry'] = file("$rootProject.buildDir/daemon").absolutePath
}

task waitForDaemonsToDie << {
    def mins = 5
    println "I'm waiting for $mins mins so that existing deamons can die with honor. It's a workaround until we fix it properly."
    Thread.sleep(mins * 60 * 1000);
}

task integTest(type: Test) {
    doFirst {
        systemProperties['org.gradle.integtest.executer'] = integTestMode
    }
}

tasks.findByName("check")?.dependsOn(integTest)

class IntegTestPlugin implements Plugin<Project> {
    public void apply(Project project) {
        project.convention.plugins.integTest = new IntegTestConvention(project)
    }
}

class IntegTestConvention {
    private final Project project
    final List integTests = []

    IntegTestConvention(Project project) {
        this.project = project
    }

    String getIntegTestMode() {
        if (!project.tasks.findByName('ciBuild') || !project.gradle.taskGraph.populated) {
            return null
        }
        if (project.isCIBuild() || project.isReleaseBuild() ) {
            return 'forking'
        }
        return System.getProperty("org.gradle.integtest.executer") ?: 'embedded'
    }

    File getIntegTestUserDir() {
        return project.file('intTestHomeDir')
    }

    File getIntegTestImageDir() {
        if (!project.tasks.findByName('intTestImage')) {
            return null
        }
        return project.intTestImage.destinationDir
    }
}
